version: '3.8'

services:
  # PostgreSQL Database (for local development)
  postgres:
    image: postgres:15-alpine
    container_name: yearbook-postgres
    environment:
      POSTGRES_DB: yearbook_sports
      POSTGRES_USER: yearbook_user
      POSTGRES_PASSWORD: yearbook_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - yearbook-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yearbook_user -d yearbook_sports"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - local

  # .NET Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yearbook-backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=${DATABASE_URL:-Host=postgres;Database=yearbook_sports;Username=yearbook_user;Password=yearbook_password}
      - JWT__Secret=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - JWT__Issuer=${JWT_ISSUER:-yearbook-sports}
      - JWT__Audience=${JWT_AUDIENCE:-yearbook-sports-users}
    ports:
      - "5000:5000"
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - yearbook-network
    volumes:
      - ./backend:/app
      - /app/bin
      - /app/obj

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: yearbook-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5000
      - NODE_ENV=development
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - yearbook-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: yearbook-redis
    ports:
      - "6379:6379"
    networks:
      - yearbook-network
    volumes:
      - redis_data:/data

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: yearbook-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - yearbook-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  yearbook-network:
    driver: bridge 